
D0003E_Lab3_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000223  0080011e  0080011e  0000055e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001590  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5f  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f6  00000000  00000000  000028d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  000031d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061e  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf8  00000000  00000000  00003b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000472a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec ea       	ldi	r30, 0xAC	; 172
  70:	f4 e0       	ldi	r31, 0x04	; 4
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ae 31       	cpi	r26, 0x1E	; 30
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	ae e1       	ldi	r26, 0x1E	; 30
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a1 34       	cpi	r26, 0x41	; 65
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  92:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
	// Low power waveform, enabling LCD
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
}

void writeChar(char ch, int pos)
{
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	// If out of bounds, do nothing
	if (pos > 5)
  aa:	66 30       	cpi	r22, 0x06	; 6
  ac:	71 05       	cpc	r23, r1
  ae:	0c f0       	brlt	.+2      	; 0xb2 <writeChar+0x18>
  b0:	5c c0       	rjmp	.+184    	; 0x16a <writeChar+0xd0>
	{
		return;
	}
	
	int offset = (pos % 2); //offset within a column
  b2:	6b 01       	movw	r12, r22
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	c9 22       	and	r12, r25
  b8:	90 e8       	ldi	r25, 0x80	; 128
  ba:	d9 22       	and	r13, r25
  bc:	dd 20       	and	r13, r13
  be:	54 f4       	brge	.+20     	; 0xd4 <writeChar+0x3a>
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	c9 1a       	sub	r12, r25
  c4:	d1 08       	sbc	r13, r1
  c6:	9e ef       	ldi	r25, 0xFE	; 254
  c8:	c9 2a       	or	r12, r25
  ca:	dd 24       	eor	r13, r13
  cc:	da 94       	dec	r13
  ce:	9f ef       	ldi	r25, 0xFF	; 255
  d0:	c9 1a       	sub	r12, r25
  d2:	d9 0a       	sbc	r13, r25
	int column = pos / 2;
  d4:	eb 01       	movw	r28, r22
  d6:	dd 23       	and	r29, r29
  d8:	0c f4       	brge	.+2      	; 0xdc <writeChar+0x42>
  da:	21 96       	adiw	r28, 0x01	; 1
  dc:	d5 95       	asr	r29
  de:	c7 95       	ror	r28
	uint8_t reset_mask;
	uint8_t digit_nibble;
	uint8_t cleared_nibble;
	uint16_t digit;
	uint8_t *addr = (uint8_t*) LCDADDRESS + column;
  e0:	c4 51       	subi	r28, 0x14	; 20
  e2:	df 4f       	sbci	r29, 0xFF	; 255
	
	// if ch is not a digit, empty the position instead
	if (isdigit(ch))
  e4:	28 2f       	mov	r18, r24
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	20 53       	subi	r18, 0x30	; 48
  ea:	31 09       	sbc	r19, r1
  ec:	2a 30       	cpi	r18, 0x0A	; 10
  ee:	31 05       	cpc	r19, r1
  f0:	50 f4       	brcc	.+20     	; 0x106 <writeChar+0x6c>
	{
		uint8_t index = ch - '0';	// Convert the character to an integer
  f2:	80 53       	subi	r24, 0x30	; 48
		digit = sccDigits[index];	// Use integer to index the SCC array
  f4:	e8 2f       	mov	r30, r24
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ee 0f       	add	r30, r30
  fa:	ff 1f       	adc	r31, r31
  fc:	e6 5f       	subi	r30, 0xF6	; 246
  fe:	fe 4f       	sbci	r31, 0xFE	; 254
 100:	e0 80       	ld	r14, Z
 102:	f1 80       	ldd	r15, Z+1	; 0x01
 104:	02 c0       	rjmp	.+4      	; 0x10a <writeChar+0x70>
	}
	else
	{
		digit = 0x0000;
 106:	e1 2c       	mov	r14, r1
 108:	f1 2c       	mov	r15, r1
	}
	
	for(int i = 0; i < 4; i++)
	{
		reset_mask = (i>0) ? 0b0000 : 0b0110;					// For LCDDR 0/1/2, preserve unused bits 1 and 2, otherwise preserve no bits
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	2a c0       	rjmp	.+84     	; 0x164 <writeChar+0xca>
 110:	10 16       	cp	r1, r16
 112:	11 06       	cpc	r1, r17
 114:	14 f4       	brge	.+4      	; 0x11a <writeChar+0x80>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	01 c0       	rjmp	.+2      	; 0x11c <writeChar+0x82>
 11a:	26 e0       	ldi	r18, 0x06	; 6
		cleared_nibble = (*addr << 4*offset) & reset_mask;	// Use reset_mask to clear the relevant nibble in memory
 11c:	98 81       	ld	r25, Y
 11e:	89 2f       	mov	r24, r25
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	a6 01       	movw	r20, r12
 124:	44 0f       	add	r20, r20
 126:	55 1f       	adc	r21, r21
 128:	44 0f       	add	r20, r20
 12a:	55 1f       	adc	r21, r21
 12c:	04 2e       	mov	r0, r20
 12e:	02 c0       	rjmp	.+4      	; 0x134 <writeChar+0x9a>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <writeChar+0x96>
 138:	82 23       	and	r24, r18
		digit_nibble = (digit) & 0x0f;						// Mask upper 4 bits
 13a:	2e 2d       	mov	r18, r14
 13c:	2f 70       	andi	r18, 0x0F	; 15
		digit_nibble = digit_nibble | cleared_nibble;		// Combine the cleared nibble with masked nibble to preserve bits not used
 13e:	82 2b       	or	r24, r18
		setbits(addr, 4, 4*offset, digit_nibble);
 140:	28 2f       	mov	r18, r24
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	64 e0       	ldi	r22, 0x04	; 4
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	ce 01       	movw	r24, r28
 14a:	0e 94 b2 01 	call	0x364	; 0x364 <setbits>
		digit = digit >> 4;									// Shift right to get to the next nibble of the digit
 14e:	f6 94       	lsr	r15
 150:	e7 94       	ror	r14
 152:	f6 94       	lsr	r15
 154:	e7 94       	ror	r14
 156:	f6 94       	lsr	r15
 158:	e7 94       	ror	r14
 15a:	f6 94       	lsr	r15
 15c:	e7 94       	ror	r14
		addr+=5;											// Increment the address, makes sure we use LCDDRX, LCDDRX+5, LCDDRX+10, LCDDRX+15
 15e:	25 96       	adiw	r28, 0x05	; 5
	else
	{
		digit = 0x0000;
	}
	
	for(int i = 0; i < 4; i++)
 160:	0f 5f       	subi	r16, 0xFF	; 255
 162:	1f 4f       	sbci	r17, 0xFF	; 255
 164:	04 30       	cpi	r16, 0x04	; 4
 166:	11 05       	cpc	r17, r1
 168:	9c f2       	brlt	.-90     	; 0x110 <writeChar+0x76>
		setbits(addr, 4, 4*offset, digit_nibble);
		digit = digit >> 4;									// Shift right to get to the next nibble of the digit
		addr+=5;											// Increment the address, makes sure we use LCDDRX, LCDDRX+5, LCDDRX+10, LCDDRX+15
	}
	
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	df 90       	pop	r13
 178:	cf 90       	pop	r12
 17a:	08 95       	ret

0000017c <writeLong>:

void writeLong(long i)
{
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	00 d0       	rcall	.+0      	; 0x186 <writeLong+0xa>
 186:	00 d0       	rcall	.+0      	; 0x188 <writeLong+0xc>
 188:	00 d0       	rcall	.+0      	; 0x18a <writeLong+0xe>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
	
	long x = i;
	int j = 5;	// max index
 18e:	05 e0       	ldi	r16, 0x05	; 5
 190:	10 e0       	ldi	r17, 0x00	; 0
	char digits[6];
	
	// Iterate downwards
	while (x>0 && j >= 0)
 192:	14 c0       	rjmp	.+40     	; 0x1bc <writeLong+0x40>
	{
		int t = x % 10;
 194:	2a e0       	ldi	r18, 0x0A	; 10
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__divmodsi4>
		char ch = t + '0';
 1a0:	60 5d       	subi	r22, 0xD0	; 208
		digits[j] = ch;
 1a2:	e1 e0       	ldi	r30, 0x01	; 1
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	e0 0f       	add	r30, r16
 1ac:	f1 1f       	adc	r31, r17
 1ae:	60 83       	st	Z, r22
		j--;
 1b0:	01 50       	subi	r16, 0x01	; 1
 1b2:	11 09       	sbc	r17, r1
		x = x/10;
 1b4:	62 2f       	mov	r22, r18
 1b6:	73 2f       	mov	r23, r19
 1b8:	84 2f       	mov	r24, r20
 1ba:	95 2f       	mov	r25, r21
	long x = i;
	int j = 5;	// max index
	char digits[6];
	
	// Iterate downwards
	while (x>0 && j >= 0)
 1bc:	16 16       	cp	r1, r22
 1be:	17 06       	cpc	r1, r23
 1c0:	18 06       	cpc	r1, r24
 1c2:	19 06       	cpc	r1, r25
 1c4:	94 f4       	brge	.+36     	; 0x1ea <writeLong+0x6e>
 1c6:	11 23       	and	r17, r17
 1c8:	2c f7       	brge	.-54     	; 0x194 <writeLong+0x18>
 1ca:	00 e0       	ldi	r16, 0x00	; 0
 1cc:	10 e0       	ldi	r17, 0x00	; 0
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <writeLong+0x72>
		x = x/10;
	}
	
	for (int i = 0; i < 6; i++)
	{
		writeChar(digits[i],i);
 1d0:	e1 e0       	ldi	r30, 0x01	; 1
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	ec 0f       	add	r30, r28
 1d6:	fd 1f       	adc	r31, r29
 1d8:	e0 0f       	add	r30, r16
 1da:	f1 1f       	adc	r31, r17
 1dc:	b8 01       	movw	r22, r16
 1de:	80 81       	ld	r24, Z
 1e0:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
		digits[j] = ch;
		j--;
		x = x/10;
	}
	
	for (int i = 0; i < 6; i++)
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <writeLong+0x72>
 1ea:	00 e0       	ldi	r16, 0x00	; 0
 1ec:	10 e0       	ldi	r17, 0x00	; 0
 1ee:	06 30       	cpi	r16, 0x06	; 6
 1f0:	11 05       	cpc	r17, r1
 1f2:	74 f3       	brlt	.-36     	; 0x1d0 <writeLong+0x54>
	{
		writeChar(digits[i],i);
	}
	
 1f4:	26 96       	adiw	r28, 0x06	; 6
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <main>:
	init();
	
	spawn(blink,0);
	spawn(button,0);
	primes(1);
}
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	08 95       	ret

00000210 <enqueue>:
	}
	else {
		enqueue(current, &(m->waitQ));  //Block locked - enqueue in waitQ
		dispatch(dequeue(&readyQ));		//Dispatch the next thread in readyQ
	}
	ENABLE();
 210:	fb 01       	movw	r30, r22
 212:	20 81       	ld	r18, Z
 214:	31 81       	ldd	r19, Z+1	; 0x01
 216:	fc 01       	movw	r30, r24
 218:	35 83       	std	Z+5, r19	; 0x05
 21a:	24 83       	std	Z+4, r18	; 0x04
 21c:	fb 01       	movw	r30, r22
 21e:	91 83       	std	Z+1, r25	; 0x01
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <dequeue>:
 224:	dc 01       	movw	r26, r24
 226:	ed 91       	ld	r30, X+
 228:	fc 91       	ld	r31, X
 22a:	11 97       	sbiw	r26, 0x01	; 1
 22c:	30 97       	sbiw	r30, 0x00	; 0
 22e:	39 f4       	brne	.+14     	; 0x23e <dequeue+0x1a>
 230:	67 e0       	ldi	r22, 0x07	; 7
 232:	72 eb       	ldi	r23, 0xB2	; 178
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 be 00 	call	0x17c	; 0x17c <writeLong>
 23c:	ff cf       	rjmp	.-2      	; 0x23c <dequeue+0x18>
 23e:	24 81       	ldd	r18, Z+4	; 0x04
 240:	35 81       	ldd	r19, Z+5	; 0x05
 242:	2d 93       	st	X+, r18
 244:	3c 93       	st	X, r19
 246:	cf 01       	movw	r24, r30
 248:	08 95       	ret

0000024a <dispatch>:
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	00 d0       	rcall	.+0      	; 0x250 <dispatch+0x6>
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	9a 83       	std	Y+2, r25	; 0x02
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current>
 25c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current+0x1>
 260:	06 96       	adiw	r24, 0x06	; 6
 262:	0e 94 13 02 	call	0x426	; 0x426 <setjmp>
 266:	89 2b       	or	r24, r25
 268:	59 f4       	brne	.+22     	; 0x280 <dispatch+0x36>
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	9a 81       	ldd	r25, Y+2	; 0x02
 26e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <current+0x1>
 272:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <current>
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	06 96       	adiw	r24, 0x06	; 6
 27c:	0e 94 33 02 	call	0x466	; 0x466 <longjmp>
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <unlock>:
}

void unlock(mutex *m) {
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
	DISABLE();
 28e:	f8 94       	cli
	if(m->waitQ) {
 290:	fc 01       	movw	r30, r24
 292:	22 81       	ldd	r18, Z+2	; 0x02
 294:	33 81       	ldd	r19, Z+3	; 0x03
 296:	23 2b       	or	r18, r19
 298:	81 f0       	breq	.+32     	; 0x2ba <unlock+0x30>
 29a:	ec 01       	movw	r28, r24
		enqueue(current, &readyQ);
 29c:	6e e1       	ldi	r22, 0x1E	; 30
 29e:	71 e0       	ldi	r23, 0x01	; 1
 2a0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current>
 2a4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current+0x1>
 2a8:	0e 94 08 01 	call	0x210	; 0x210 <enqueue>
		dispatch(dequeue(&(m->waitQ)));
 2ac:	ce 01       	movw	r24, r28
 2ae:	02 96       	adiw	r24, 0x02	; 2
 2b0:	0e 94 12 01 	call	0x224	; 0x224 <dequeue>
 2b4:	0e 94 25 01 	call	0x24a	; 0x24a <dispatch>
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <unlock+0x36>
	}
	else
	{
		m->locked = 0;
 2ba:	fc 01       	movw	r30, r24
 2bc:	11 82       	std	Z+1, r1	; 0x01
 2be:	10 82       	st	Z, r1
	}
	ENABLE();
 2c0:	78 94       	sei
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <__vector_3>:

mutex m_blink = {1,0};
mutex m_button = {1,0};


ISR(PCINT1_vect) {
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	4f 93       	push	r20
 2d8:	5f 93       	push	r21
 2da:	6f 93       	push	r22
 2dc:	7f 93       	push	r23
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31

	if (PINB >> 7 == 0) {
 2ea:	1f 99       	sbic	0x03, 7	; 3
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <__vector_3+0x2e>
		unlock(&m_button);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 45 01 	call	0x28a	; 0x28a <unlock>
	}
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	unlock(&m_blink);
 33a:	84 e0       	ldi	r24, 0x04	; 4
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 45 01 	call	0x28a	; 0x28a <unlock>
}
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	7f 91       	pop	r23
 350:	6f 91       	pop	r22
 352:	5f 91       	pop	r21
 354:	4f 91       	pop	r20
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <setbits>:
 */ 
#include <stdint-gcc.h>


void setbits(volatile uint8_t *ptr, int width, int start, uint8_t value)
{
 364:	fc 01       	movw	r30, r24
 366:	86 2f       	mov	r24, r22
	uint8_t mask = ~(~0 << width) << start;
 368:	6f ef       	ldi	r22, 0xFF	; 255
 36a:	7f ef       	ldi	r23, 0xFF	; 255
 36c:	02 c0       	rjmp	.+4      	; 0x372 <setbits+0xe>
 36e:	66 0f       	add	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	8a 95       	dec	r24
 374:	e2 f7       	brpl	.-8      	; 0x36e <setbits+0xa>
 376:	60 95       	com	r22
 378:	70 95       	com	r23
 37a:	04 2e       	mov	r0, r20
 37c:	02 c0       	rjmp	.+4      	; 0x382 <setbits+0x1e>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <setbits+0x1a>
	uint8_t data = (value << start) & mask;
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <setbits+0x2a>
 38a:	22 0f       	add	r18, r18
 38c:	33 1f       	adc	r19, r19
 38e:	4a 95       	dec	r20
 390:	e2 f7       	brpl	.-8      	; 0x38a <setbits+0x26>
 392:	26 23       	and	r18, r22
	*ptr = *ptr & ~mask;
 394:	80 81       	ld	r24, Z
 396:	60 95       	com	r22
 398:	68 23       	and	r22, r24
 39a:	60 83       	st	Z, r22
	*ptr = *ptr | data;
 39c:	80 81       	ld	r24, Z
 39e:	28 2b       	or	r18, r24
 3a0:	20 83       	st	Z, r18
 3a2:	08 95       	ret

000003a4 <__divmodsi4>:
 3a4:	05 2e       	mov	r0, r21
 3a6:	97 fb       	bst	r25, 7
 3a8:	1e f4       	brtc	.+6      	; 0x3b0 <__divmodsi4+0xc>
 3aa:	00 94       	com	r0
 3ac:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__negsi2>
 3b0:	57 fd       	sbrc	r21, 7
 3b2:	07 d0       	rcall	.+14     	; 0x3c2 <__divmodsi4_neg2>
 3b4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__udivmodsi4>
 3b8:	07 fc       	sbrc	r0, 7
 3ba:	03 d0       	rcall	.+6      	; 0x3c2 <__divmodsi4_neg2>
 3bc:	4e f4       	brtc	.+18     	; 0x3d0 <__divmodsi4_exit>
 3be:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__negsi2>

000003c2 <__divmodsi4_neg2>:
 3c2:	50 95       	com	r21
 3c4:	40 95       	com	r20
 3c6:	30 95       	com	r19
 3c8:	21 95       	neg	r18
 3ca:	3f 4f       	sbci	r19, 0xFF	; 255
 3cc:	4f 4f       	sbci	r20, 0xFF	; 255
 3ce:	5f 4f       	sbci	r21, 0xFF	; 255

000003d0 <__divmodsi4_exit>:
 3d0:	08 95       	ret

000003d2 <__negsi2>:
 3d2:	90 95       	com	r25
 3d4:	80 95       	com	r24
 3d6:	70 95       	com	r23
 3d8:	61 95       	neg	r22
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f 4f       	sbci	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	08 95       	ret

000003e2 <__udivmodsi4>:
 3e2:	a1 e2       	ldi	r26, 0x21	; 33
 3e4:	1a 2e       	mov	r1, r26
 3e6:	aa 1b       	sub	r26, r26
 3e8:	bb 1b       	sub	r27, r27
 3ea:	fd 01       	movw	r30, r26
 3ec:	0d c0       	rjmp	.+26     	; 0x408 <__udivmodsi4_ep>

000003ee <__udivmodsi4_loop>:
 3ee:	aa 1f       	adc	r26, r26
 3f0:	bb 1f       	adc	r27, r27
 3f2:	ee 1f       	adc	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	a2 17       	cp	r26, r18
 3f8:	b3 07       	cpc	r27, r19
 3fa:	e4 07       	cpc	r30, r20
 3fc:	f5 07       	cpc	r31, r21
 3fe:	20 f0       	brcs	.+8      	; 0x408 <__udivmodsi4_ep>
 400:	a2 1b       	sub	r26, r18
 402:	b3 0b       	sbc	r27, r19
 404:	e4 0b       	sbc	r30, r20
 406:	f5 0b       	sbc	r31, r21

00000408 <__udivmodsi4_ep>:
 408:	66 1f       	adc	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	1a 94       	dec	r1
 412:	69 f7       	brne	.-38     	; 0x3ee <__udivmodsi4_loop>
 414:	60 95       	com	r22
 416:	70 95       	com	r23
 418:	80 95       	com	r24
 41a:	90 95       	com	r25
 41c:	9b 01       	movw	r18, r22
 41e:	ac 01       	movw	r20, r24
 420:	bd 01       	movw	r22, r26
 422:	cf 01       	movw	r24, r30
 424:	08 95       	ret

00000426 <setjmp>:
 426:	dc 01       	movw	r26, r24
 428:	2d 92       	st	X+, r2
 42a:	3d 92       	st	X+, r3
 42c:	4d 92       	st	X+, r4
 42e:	5d 92       	st	X+, r5
 430:	6d 92       	st	X+, r6
 432:	7d 92       	st	X+, r7
 434:	8d 92       	st	X+, r8
 436:	9d 92       	st	X+, r9
 438:	ad 92       	st	X+, r10
 43a:	bd 92       	st	X+, r11
 43c:	cd 92       	st	X+, r12
 43e:	dd 92       	st	X+, r13
 440:	ed 92       	st	X+, r14
 442:	fd 92       	st	X+, r15
 444:	0d 93       	st	X+, r16
 446:	1d 93       	st	X+, r17
 448:	cd 93       	st	X+, r28
 44a:	dd 93       	st	X+, r29
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	8d b7       	in	r24, 0x3d	; 61
 452:	8d 93       	st	X+, r24
 454:	8e b7       	in	r24, 0x3e	; 62
 456:	8d 93       	st	X+, r24
 458:	8f b7       	in	r24, 0x3f	; 63
 45a:	8d 93       	st	X+, r24
 45c:	ed 93       	st	X+, r30
 45e:	fd 93       	st	X+, r31
 460:	88 27       	eor	r24, r24
 462:	99 27       	eor	r25, r25
 464:	09 94       	ijmp

00000466 <longjmp>:
 466:	dc 01       	movw	r26, r24
 468:	cb 01       	movw	r24, r22
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	91 05       	cpc	r25, r1
 46e:	81 1d       	adc	r24, r1
 470:	2d 90       	ld	r2, X+
 472:	3d 90       	ld	r3, X+
 474:	4d 90       	ld	r4, X+
 476:	5d 90       	ld	r5, X+
 478:	6d 90       	ld	r6, X+
 47a:	7d 90       	ld	r7, X+
 47c:	8d 90       	ld	r8, X+
 47e:	9d 90       	ld	r9, X+
 480:	ad 90       	ld	r10, X+
 482:	bd 90       	ld	r11, X+
 484:	cd 90       	ld	r12, X+
 486:	dd 90       	ld	r13, X+
 488:	ed 90       	ld	r14, X+
 48a:	fd 90       	ld	r15, X+
 48c:	0d 91       	ld	r16, X+
 48e:	1d 91       	ld	r17, X+
 490:	cd 91       	ld	r28, X+
 492:	dd 91       	ld	r29, X+
 494:	ed 91       	ld	r30, X+
 496:	fd 91       	ld	r31, X+
 498:	0d 90       	ld	r0, X+
 49a:	f8 94       	cli
 49c:	fe bf       	out	0x3e, r31	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	ed bf       	out	0x3d, r30	; 61
 4a2:	ed 91       	ld	r30, X+
 4a4:	fd 91       	ld	r31, X+
 4a6:	09 94       	ijmp

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
