
D0003E_Lab3_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000006d8  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022a  00800118  00800118  00000784  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001700  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dff  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cd  00000000  00000000  00002e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000036e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000627  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df2  00000000  00000000  0000402f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004e21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 ed       	ldi	r30, 0xD8	; 216
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a2 34       	cpi	r26, 0x42	; 66
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  92:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
			return 0;
		}
		n--;
	}
	return 1;
}
  9a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <active>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	89 27       	eor	r24, r25
  a2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active>
  a6:	81 11       	cpse	r24, r1
  a8:	0a c0       	rjmp	.+20     	; 0xbe <blink+0x24>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	8f ee       	ldi	r24, 0xEF	; 239
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0c 94 ca 02 	jmp	0x594	; 0x594 <setbits>
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	8f ee       	ldi	r24, 0xEF	; 239
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0c 94 ca 02 	jmp	0x594	; 0x594 <setbits>

000000d2 <printAt>:

void printAt(long num, int pos) {
  d2:	8f 92       	push	r8
  d4:	9f 92       	push	r9
  d6:	af 92       	push	r10
  d8:	bf 92       	push	r11
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	4b 01       	movw	r8, r22
  e8:	5c 01       	movw	r10, r24
  ea:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
  ec:	24 e6       	ldi	r18, 0x64	; 100
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divmodsi4>
  f8:	2a e0       	ldi	r18, 0x0A	; 10
  fa:	c2 2e       	mov	r12, r18
  fc:	d1 2c       	mov	r13, r1
  fe:	e1 2c       	mov	r14, r1
 100:	f1 2c       	mov	r15, r1
 102:	a7 01       	movw	r20, r14
 104:	96 01       	movw	r18, r12
 106:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divmodsi4>
 10a:	be 01       	movw	r22, r28
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	82 0f       	add	r24, r18
 110:	0e 94 90 01 	call	0x320	; 0x320 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c5 01       	movw	r24, r10
 118:	b4 01       	movw	r22, r8
 11a:	a7 01       	movw	r20, r14
 11c:	96 01       	movw	r18, r12
 11e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divmodsi4>
 122:	86 2f       	mov	r24, r22
 124:	be 01       	movw	r22, r28
 126:	80 5d       	subi	r24, 0xD0	; 208

}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	ff 90       	pop	r15
 12e:	ef 90       	pop	r14
 130:	df 90       	pop	r13
 132:	cf 90       	pop	r12
 134:	bf 90       	pop	r11
 136:	af 90       	pop	r10
 138:	9f 90       	pop	r9
 13a:	8f 90       	pop	r8

void printAt(long num, int pos) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
 13c:	0c 94 90 01 	jmp	0x320	; 0x320 <writeChar>

00000140 <button>:

}

void button(int arg) {
	
	printAt(btn_count, 4);
 140:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 144:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 148:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 14c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 150:	44 e0       	ldi	r20, 0x04	; 4
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	0e 94 69 00 	call	0xd2	; 0xd2 <printAt>
	btn_count++;
 158:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 15c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 160:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
 164:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	a1 1d       	adc	r26, r1
 16c:	b1 1d       	adc	r27, r1
 16e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 172:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 176:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 17a:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
 17e:	08 95       	ret

00000180 <primes>:

	
}

void primes(long i) {
 180:	6b 01       	movw	r12, r22
 182:	7c 01       	movw	r14, r24
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	c2 1a       	sub	r12, r18
 188:	d1 08       	sbc	r13, r1
 18a:	e1 08       	sbc	r14, r1
 18c:	f1 08       	sbc	r15, r1
 18e:	46 01       	movw	r8, r12
 190:	57 01       	movw	r10, r14
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	88 1a       	sub	r8, r24
 196:	98 0a       	sbc	r9, r24
 198:	a8 0a       	sbc	r10, r24
 19a:	b8 0a       	sbc	r11, r24

int is_prime(long i)
{
	long n = i-1;
	
	while (n>1)
 19c:	22 e0       	ldi	r18, 0x02	; 2
 19e:	c2 16       	cp	r12, r18
 1a0:	d1 04       	cpc	r13, r1
 1a2:	e1 04       	cpc	r14, r1
 1a4:	f1 04       	cpc	r15, r1
 1a6:	64 f4       	brge	.+24     	; 0x1c0 <primes+0x40>
 1a8:	18 c0       	rjmp	.+48     	; 0x1da <primes+0x5a>
	{
		if (i%n == 0)
		{
			return 0;
		}
		n--;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	c8 1a       	sub	r12, r24
 1ae:	d1 08       	sbc	r13, r1
 1b0:	e1 08       	sbc	r14, r1
 1b2:	f1 08       	sbc	r15, r1

int is_prime(long i)
{
	long n = i-1;
	
	while (n>1)
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	c2 16       	cp	r12, r18
 1b8:	d1 04       	cpc	r13, r1
 1ba:	e1 04       	cpc	r14, r1
 1bc:	f1 04       	cpc	r15, r1
 1be:	69 f0       	breq	.+26     	; 0x1da <primes+0x5a>
	{
		if (i%n == 0)
 1c0:	c5 01       	movw	r24, r10
 1c2:	b4 01       	movw	r22, r8
 1c4:	a7 01       	movw	r20, r14
 1c6:	96 01       	movw	r18, r12
 1c8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divmodsi4>
 1cc:	67 2b       	or	r22, r23
 1ce:	68 2b       	or	r22, r24
 1d0:	69 2b       	or	r22, r25
 1d2:	59 f7       	brne	.-42     	; 0x1aa <primes+0x2a>
 1d4:	75 01       	movw	r14, r10
 1d6:	64 01       	movw	r12, r8
		{
			
			printAt(i, 0);
		}
		i++;
	}
 1d8:	da cf       	rjmp	.-76     	; 0x18e <primes+0xe>
	while (1)
	{
		if (is_prime(i))
		{
			
			printAt(i, 0);
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	c5 01       	movw	r24, r10
 1e0:	b4 01       	movw	r22, r8
 1e2:	0e 94 69 00 	call	0xd2	; 0xd2 <printAt>
 1e6:	75 01       	movw	r14, r10
 1e8:	64 01       	movw	r12, r8
 1ea:	d1 cf       	rjmp	.-94     	; 0x18e <primes+0xe>

000001ec <init>:
	pp++;
	writeChar( num % 10 + '0', pp);

}

void init() {
 1ec:	cf 93       	push	r28
	CLKPR = 0x80;
 1ee:	e1 e6       	ldi	r30, 0x61	; 97
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	c0 e8       	ldi	r28, 0x80	; 128
 1f4:	c0 83       	st	Z, r28
	CLKPR = 0x00;
 1f6:	10 82       	st	Z, r1
	
	initLCD();
 1f8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <initLCD>
	
	// Enable joystick
	PORTB = PORTB | (1<<7);
 1fc:	2f 9a       	sbi	0x05, 7	; 5
	
	EIMSK = (1<<7);
 1fe:	cd bb       	out	0x1d, r28	; 29
	PCMSK1 = (1<<7);
 200:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	
	// Enable OC1A pin
	PORTB = PORTB | (1<<5);
 204:	2d 9a       	sbi	0x05, 5	; 5
	
	// Timer initialization, set prescaler to 1024 and turn on CTC
	TCCR1B = (1<<CS12) | (1<<CS10)  | (1<<WGM12);
 206:	8d e0       	ldi	r24, 0x0D	; 13
 208:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	
	// OC1A set on compare match
	TCCR1A = (1<<COM1A1) | (1<<COM1A0);
 20c:	80 ec       	ldi	r24, 0xC0	; 192
 20e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
	
	// Enable out compare A match interrupt
	TIMSK1 |= (1<<OCIE1A);
 212:	ef e6       	ldi	r30, 0x6F	; 111
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	80 83       	st	Z, r24
	
	OCR1A = 8000000/1024/2;
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	9f e0       	ldi	r25, 0x0F	; 15
 220:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 224:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	
	TCNT1 = 0;
 228:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 22c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <writeChar.part.0>:
	
	// Low power waveform, enabling LCD
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
}

void writeChar(char ch, int pos)
 234:	cf 92       	push	r12
 236:	df 92       	push	r13
 238:	ef 92       	push	r14
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
	if (pos > 5)
	{
		return;
	}
	
	int offset = (pos % 2); //offset within a column
 244:	8b 01       	movw	r16, r22
 246:	01 70       	andi	r16, 0x01	; 1
 248:	10 78       	andi	r17, 0x80	; 128
 24a:	17 fd       	sbrc	r17, 7
 24c:	4d c0       	rjmp	.+154    	; 0x2e8 <writeChar.part.0+0xb4>
	int column = pos / 2;
	uint8_t reset_mask;
	uint8_t digit_nibble;
	uint8_t cleared_nibble;
	uint16_t digit;
	uint8_t *addr = (uint8_t*) LCDADDRESS + column;
 24e:	77 fd       	sbrc	r23, 7
 250:	53 c0       	rjmp	.+166    	; 0x2f8 <writeChar.part.0+0xc4>
 252:	75 95       	asr	r23
 254:	67 95       	ror	r22
 256:	eb 01       	movw	r28, r22
 258:	c4 51       	subi	r28, 0x14	; 20
 25a:	df 4f       	sbci	r29, 0xFF	; 255
	
	// if ch is not a digit, empty the position instead
	if (isdigit(ch))
 25c:	28 2f       	mov	r18, r24
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	20 53       	subi	r18, 0x30	; 48
 262:	31 09       	sbc	r19, r1
 264:	2a 30       	cpi	r18, 0x0A	; 10
 266:	31 05       	cpc	r19, r1
 268:	e0 f5       	brcc	.+120    	; 0x2e2 <writeChar.part.0+0xae>
	{
		uint8_t index = ch - '0';	// Convert the character to an integer
		digit = sccDigits[index];	// Use integer to index the SCC array
 26a:	80 53       	subi	r24, 0x30	; 48
 26c:	e8 2f       	mov	r30, r24
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	ee 0f       	add	r30, r30
 272:	ff 1f       	adc	r31, r31
 274:	ec 5f       	subi	r30, 0xFC	; 252
 276:	fe 4f       	sbci	r31, 0xFE	; 254
 278:	c0 80       	ld	r12, Z
 27a:	d1 80       	ldd	r13, Z+1	; 0x01
 27c:	00 0f       	add	r16, r16
 27e:	11 1f       	adc	r17, r17
 280:	00 0f       	add	r16, r16
 282:	11 1f       	adc	r17, r17
	}
	else
	{
		digit = 0x0000;
 284:	e1 2c       	mov	r14, r1
 286:	f1 2c       	mov	r15, r1
	}
	
	for(int i = 0; i < 4; i++)
	{
		reset_mask = (i>0) ? 0b0000 : 0b0110;					// For LCDDR 0/1/2, preserve unused bits 1 and 2, otherwise preserve no bits
 288:	36 e0       	ldi	r19, 0x06	; 6
		cleared_nibble = (*addr << 4*offset) & reset_mask;	// Use reset_mask to clear the relevant nibble in memory
		digit_nibble = (digit) & 0x0f;						// Mask upper 4 bits
 28a:	2c 2d       	mov	r18, r12
 28c:	2f 70       	andi	r18, 0x0F	; 15
		digit_nibble = digit_nibble | cleared_nibble;		// Combine the cleared nibble with masked nibble to preserve bits not used
		setbits(addr, 4, 4*offset, digit_nibble);
 28e:	98 81       	ld	r25, Y
 290:	89 2f       	mov	r24, r25
 292:	00 2e       	mov	r0, r16
 294:	01 c0       	rjmp	.+2      	; 0x298 <writeChar.part.0+0x64>
 296:	88 0f       	add	r24, r24
 298:	0a 94       	dec	r0
 29a:	ea f7       	brpl	.-6      	; 0x296 <writeChar.part.0+0x62>
 29c:	83 23       	and	r24, r19
 29e:	82 2b       	or	r24, r18
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	a8 01       	movw	r20, r16
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	ce 01       	movw	r24, r28
 2ac:	0e 94 ca 02 	call	0x594	; 0x594 <setbits>
		digit = digit >> 4;									// Shift right to get to the next nibble of the digit
 2b0:	d2 94       	swap	r13
 2b2:	c2 94       	swap	r12
 2b4:	8f e0       	ldi	r24, 0x0F	; 15
 2b6:	c8 22       	and	r12, r24
 2b8:	cd 24       	eor	r12, r13
 2ba:	d8 22       	and	r13, r24
 2bc:	cd 24       	eor	r12, r13
		addr+=5;											// Increment the address, makes sure we use LCDDRX, LCDDRX+5, LCDDRX+10, LCDDRX+15
 2be:	25 96       	adiw	r28, 0x05	; 5
	else
	{
		digit = 0x0000;
	}
	
	for(int i = 0; i < 4; i++)
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	e8 1a       	sub	r14, r24
 2c4:	f8 0a       	sbc	r15, r24
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	e8 16       	cp	r14, r24
 2cc:	f1 04       	cpc	r15, r1
 2ce:	e9 f6       	brne	.-70     	; 0x28a <writeChar.part.0+0x56>
		setbits(addr, 4, 4*offset, digit_nibble);
		digit = digit >> 4;									// Shift right to get to the next nibble of the digit
		addr+=5;											// Increment the address, makes sure we use LCDDRX, LCDDRX+5, LCDDRX+10, LCDDRX+15
	}
	
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	df 90       	pop	r13
 2de:	cf 90       	pop	r12
 2e0:	08 95       	ret
		uint8_t index = ch - '0';	// Convert the character to an integer
		digit = sccDigits[index];	// Use integer to index the SCC array
	}
	else
	{
		digit = 0x0000;
 2e2:	c1 2c       	mov	r12, r1
 2e4:	d1 2c       	mov	r13, r1
 2e6:	ca cf       	rjmp	.-108    	; 0x27c <writeChar.part.0+0x48>
	if (pos > 5)
	{
		return;
	}
	
	int offset = (pos % 2); //offset within a column
 2e8:	01 50       	subi	r16, 0x01	; 1
 2ea:	11 09       	sbc	r17, r1
 2ec:	0e 6f       	ori	r16, 0xFE	; 254
 2ee:	1f 6f       	ori	r17, 0xFF	; 255
 2f0:	0f 5f       	subi	r16, 0xFF	; 255
 2f2:	1f 4f       	sbci	r17, 0xFF	; 255
	int column = pos / 2;
	uint8_t reset_mask;
	uint8_t digit_nibble;
	uint8_t cleared_nibble;
	uint16_t digit;
	uint8_t *addr = (uint8_t*) LCDADDRESS + column;
 2f4:	77 ff       	sbrs	r23, 7
 2f6:	ad cf       	rjmp	.-166    	; 0x252 <writeChar.part.0+0x1e>
 2f8:	6f 5f       	subi	r22, 0xFF	; 255
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	aa cf       	rjmp	.-172    	; 0x252 <writeChar.part.0+0x1e>

000002fe <initLCD>:
static const int sccDigits[10] = {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};

void initLCD()
{
	
	CLKPR = 0x80;
 2fe:	e1 e6       	ldi	r30, 0x61	; 97
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 e8       	ldi	r24, 0x80	; 128
 304:	80 83       	st	Z, r24
	CLKPR = 0x00;
 306:	10 82       	st	Z, r1
	
	// Using asynchronous clock, setting segments to 25, setting duty to 1/4
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX0) | (1<<LCDMUX1) | (1<<LCDPM2)| (1<<LCDPM1) | (1<<LCDPM0);
 308:	87 eb       	ldi	r24, 0xB7	; 183
 30a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	
	// Prescaler set to N = 16, Clock divide D=8
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 30e:	87 e0       	ldi	r24, 0x07	; 7
 310:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	
	//Drive time set to 300 microseconds
	LCDCCR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 314:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	// Low power waveform, enabling LCD
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
 318:	80 ec       	ldi	r24, 0xC0	; 192
 31a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
 31e:	08 95       	ret

00000320 <writeChar>:
}

void writeChar(char ch, int pos)
{
	// If out of bounds, do nothing
	if (pos > 5)
 320:	66 30       	cpi	r22, 0x06	; 6
 322:	71 05       	cpc	r23, r1
 324:	14 f4       	brge	.+4      	; 0x32a <writeChar+0xa>
 326:	0c 94 1a 01 	jmp	0x234	; 0x234 <writeChar.part.0>
 32a:	08 95       	ret

0000032c <main>:



int main(void)
{
	init();
 32c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <init>
    spawn(blink, 0);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	8d e4       	ldi	r24, 0x4D	; 77
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 e6 01 	call	0x3cc	; 0x3cc <spawn>
	spawn(button, 0);
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	80 ea       	ldi	r24, 0xA0	; 160
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 e6 01 	call	0x3cc	; 0x3cc <spawn>
	primes(1);
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 c0 00 	call	0x180	; 0x180 <primes>
}
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret

0000035a <dispatch>:
mutex* get_blink_mutex() {
	return &m_blink;
}
mutex* get_button_mutex() {
	return &m_button;
}
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	00 d0       	rcall	.+0      	; 0x360 <dispatch+0x6>
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	9a 83       	std	Y+2, r25	; 0x02
 366:	89 83       	std	Y+1, r24	; 0x01
 368:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 36c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 370:	06 96       	adiw	r24, 0x06	; 6
 372:	0e 94 29 03 	call	0x652	; 0x652 <setjmp>
 376:	89 2b       	or	r24, r25
 378:	29 f0       	breq	.+10     	; 0x384 <dispatch+0x2a>
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	9a 81       	ldd	r25, Y+2	; 0x02
 388:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 38c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	06 96       	adiw	r24, 0x06	; 6
 396:	0e 94 49 03 	call	0x692	; 0x692 <longjmp>

0000039a <yield>:
    ENABLE();
	yield();
}

void yield(void) {
	DISABLE();
 39a:	f8 94       	cli
	p->next = *queue;
	*queue = p;
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 39c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <readyQ>
 3a0:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <readyQ+0x1>
    if (*queue) {
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	89 f0       	breq	.+34     	; 0x3ca <yield+0x30>
        *queue = (*queue)->next;
 3a8:	fc 01       	movw	r30, r24
 3aa:	24 81       	ldd	r18, Z+4	; 0x04
 3ac:	35 81       	ldd	r19, Z+5	; 0x05
}

void yield(void) {
	DISABLE();
	thread t = dequeue(&readyQ);
	enqueue(current, &readyQ);
 3ae:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    initialized = 1;
}


static void enqueue(thread p, thread *queue) {
	p->next = *queue;
 3b6:	35 83       	std	Z+5, r19	; 0x05
 3b8:	24 83       	std	Z+4, r18	; 0x04
	*queue = p;
 3ba:	f0 93 20 01 	sts	0x0120, r31	; 0x800120 <readyQ+0x1>
 3be:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <readyQ>

void yield(void) {
	DISABLE();
	thread t = dequeue(&readyQ);
	enqueue(current, &readyQ);
	dispatch(t);
 3c2:	0e 94 ad 01 	call	0x35a	; 0x35a <dispatch>
	ENABLE();
 3c6:	78 94       	sei
}
 3c8:	08 95       	ret
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <yield+0x30>

000003cc <spawn>:
        current = next;
        longjmp(next->context,1);
    }
}

void spawn(void (* function)(int), int arg) {
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <spawn+0x6>
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 3d6:	f8 94       	cli
    if (!initialized) initialize();
 3d8:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <initialized>
 3dc:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <initialized+0x1>
 3e0:	23 2b       	or	r18, r19
 3e2:	e1 f4       	brne	.+56     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>


static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 3e4:	2b ef       	ldi	r18, 0xFB	; 251
 3e6:	31 e0       	ldi	r19, 0x01	; 1
 3e8:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <threads+0x5>
 3ec:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <threads+0x4>
 3f0:	28 e6       	ldi	r18, 0x68	; 104
 3f2:	32 e0       	ldi	r19, 0x02	; 2
 3f4:	30 93 00 02 	sts	0x0200, r19	; 0x800200 <threads+0x72>
 3f8:	20 93 ff 01 	sts	0x01FF, r18	; 0x8001ff <threads+0x71>
 3fc:	25 ed       	ldi	r18, 0xD5	; 213
 3fe:	32 e0       	ldi	r19, 0x02	; 2
 400:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <threads+0xdf>
 404:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 408:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14c>
 40c:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <threads+0x14b>

    initialized = 1;
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	30 93 1e 01 	sts	0x011E, r19	; 0x80011e <initialized+0x1>
 418:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <initialized>
	p->next = *queue;
	*queue = p;
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 41c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 420:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 424:	3a 83       	std	Y+2, r19	; 0x02
 426:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 428:	23 2b       	or	r18, r19
 42a:	09 f4       	brne	.+2      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 42c:	5f c0       	rjmp	.+190    	; 0x4ec <__DATA_REGION_LENGTH__+0xec>
        *queue = (*queue)->next;
 42e:	e9 81       	ldd	r30, Y+1	; 0x01
 430:	fa 81       	ldd	r31, Y+2	; 0x02
 432:	44 81       	ldd	r20, Z+4	; 0x04
 434:	55 81       	ldd	r21, Z+5	; 0x05
 436:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 43a:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 43e:	91 83       	std	Z+1, r25	; 0x01
 440:	80 83       	st	Z, r24
    newp->arg = arg;
 442:	73 83       	std	Z+3, r23	; 0x03
 444:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 446:	15 82       	std	Z+5, r1	; 0x05
 448:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 44a:	cf 01       	movw	r24, r30
 44c:	06 96       	adiw	r24, 0x06	; 6
 44e:	0e 94 29 03 	call	0x652	; 0x652 <setjmp>
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f9 f0       	breq	.+62     	; 0x494 <__DATA_REGION_LENGTH__+0x94>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 456:	e9 81       	ldd	r30, Y+1	; 0x01
 458:	fa 81       	ldd	r31, Y+2	; 0x02
 45a:	36 96       	adiw	r30, 0x06	; 6
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	87 59       	subi	r24, 0x97	; 151
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	91 8b       	std	Z+17, r25	; 0x11
 466:	80 8b       	std	Z+16, r24	; 0x10
 468:	93 8b       	std	Z+19, r25	; 0x13
 46a:	82 8b       	std	Z+18, r24	; 0x12
    initialized = 1;
}


static void enqueue(thread p, thread *queue) {
	p->next = *queue;
 46c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <readyQ>
 470:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <readyQ+0x1>
 474:	e9 81       	ldd	r30, Y+1	; 0x01
 476:	fa 81       	ldd	r31, Y+2	; 0x02
 478:	95 83       	std	Z+5, r25	; 0x05
 47a:	84 83       	std	Z+4, r24	; 0x04
	*queue = p;
 47c:	f0 93 20 01 	sts	0x0120, r31	; 0x800120 <readyQ+0x1>
 480:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 484:	78 94       	sei
	yield();
 486:	0e 94 cd 01 	call	0x39a	; 0x39a <yield>
}
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 494:	78 94       	sei
        current->function(current->arg);
 496:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 49a:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 49e:	ed 91       	ld	r30, X+
 4a0:	fc 91       	ld	r31, X
 4a2:	11 97       	sbiw	r26, 0x01	; 1
 4a4:	12 96       	adiw	r26, 0x02	; 2
 4a6:	8d 91       	ld	r24, X+
 4a8:	9c 91       	ld	r25, X
 4aa:	13 97       	sbiw	r26, 0x03	; 3
 4ac:	09 95       	icall
        DISABLE();
 4ae:	f8 94       	cli
        enqueue(current, &freeQ);
 4b0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4b4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    initialized = 1;
}


static void enqueue(thread p, thread *queue) {
	p->next = *queue;
 4b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 4bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 4c0:	95 83       	std	Z+5, r25	; 0x05
 4c2:	84 83       	std	Z+4, r24	; 0x04
	*queue = p;
 4c4:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 4c8:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4cc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <readyQ>
 4d0:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <readyQ+0x1>
    if (*queue) {
 4d4:	00 97       	sbiw	r24, 0x00	; 0
 4d6:	59 f0       	breq	.+22     	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
        *queue = (*queue)->next;
 4d8:	fc 01       	movw	r30, r24
 4da:	24 81       	ldd	r18, Z+4	; 0x04
 4dc:	35 81       	ldd	r19, Z+5	; 0x05
 4de:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <readyQ+0x1>
 4e2:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 4e6:	0e 94 ad 01 	call	0x35a	; 0x35a <dispatch>
 4ea:	b5 cf       	rjmp	.-150    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__DATA_REGION_LENGTH__+0xec>
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__DATA_REGION_LENGTH__+0xee>

000004f0 <__vector_3>:

mutex m_blink = {1,0};
mutex m_button = {1,0};


ISR(PCINT1_vect) {
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	2f 93       	push	r18
 4fc:	3f 93       	push	r19
 4fe:	4f 93       	push	r20
 500:	5f 93       	push	r21
 502:	6f 93       	push	r22
 504:	7f 93       	push	r23
 506:	8f 93       	push	r24
 508:	9f 93       	push	r25
 50a:	af 93       	push	r26
 50c:	bf 93       	push	r27
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31

	if (PINB >> 7 == 0) {
 512:	1f 99       	sbic	0x03, 7	; 3
 514:	06 c0       	rjmp	.+12     	; 0x522 <__stack+0x23>
		spawn(button, 0);
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	80 ea       	ldi	r24, 0xA0	; 160
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <spawn>
	}
}
 522:	ff 91       	pop	r31
 524:	ef 91       	pop	r30
 526:	bf 91       	pop	r27
 528:	af 91       	pop	r26
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	7f 91       	pop	r23
 530:	6f 91       	pop	r22
 532:	5f 91       	pop	r21
 534:	4f 91       	pop	r20
 536:	3f 91       	pop	r19
 538:	2f 91       	pop	r18
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	2f 93       	push	r18
 550:	3f 93       	push	r19
 552:	4f 93       	push	r20
 554:	5f 93       	push	r21
 556:	6f 93       	push	r22
 558:	7f 93       	push	r23
 55a:	8f 93       	push	r24
 55c:	9f 93       	push	r25
 55e:	af 93       	push	r26
 560:	bf 93       	push	r27
 562:	ef 93       	push	r30
 564:	ff 93       	push	r31
	spawn(blink, 0);
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	8d e4       	ldi	r24, 0x4D	; 77
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <spawn>
}
 572:	ff 91       	pop	r31
 574:	ef 91       	pop	r30
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	7f 91       	pop	r23
 580:	6f 91       	pop	r22
 582:	5f 91       	pop	r21
 584:	4f 91       	pop	r20
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <setbits>:
 */ 
#include <stdint-gcc.h>


void setbits(volatile uint8_t *ptr, int width, int start, uint8_t value)
{
 594:	fc 01       	movw	r30, r24
 596:	86 2f       	mov	r24, r22
	uint8_t mask = ~(~0 << width) << start;
	uint8_t data = (value << start) & mask;
 598:	6f ef       	ldi	r22, 0xFF	; 255
 59a:	7f ef       	ldi	r23, 0xFF	; 255
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <setbits+0xe>
 59e:	66 0f       	add	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <setbits+0xa>
 5a6:	60 95       	com	r22
 5a8:	70 95       	com	r23
 5aa:	04 2e       	mov	r0, r20
 5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <setbits+0x1c>
 5ae:	66 0f       	add	r22, r22
 5b0:	0a 94       	dec	r0
 5b2:	ea f7       	brpl	.-6      	; 0x5ae <setbits+0x1a>
	*ptr = *ptr & ~mask;
 5b4:	80 81       	ld	r24, Z
 5b6:	96 2f       	mov	r25, r22
 5b8:	90 95       	com	r25
 5ba:	89 23       	and	r24, r25
 5bc:	80 83       	st	Z, r24
	*ptr = *ptr | data;
 5be:	80 81       	ld	r24, Z
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <setbits+0x30>
 5c2:	22 0f       	add	r18, r18
 5c4:	4a 95       	dec	r20
 5c6:	ea f7       	brpl	.-6      	; 0x5c2 <setbits+0x2e>
 5c8:	62 23       	and	r22, r18
 5ca:	68 2b       	or	r22, r24
 5cc:	60 83       	st	Z, r22
 5ce:	08 95       	ret

000005d0 <__divmodsi4>:
 5d0:	05 2e       	mov	r0, r21
 5d2:	97 fb       	bst	r25, 7
 5d4:	1e f4       	brtc	.+6      	; 0x5dc <__divmodsi4+0xc>
 5d6:	00 94       	com	r0
 5d8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__negsi2>
 5dc:	57 fd       	sbrc	r21, 7
 5de:	07 d0       	rcall	.+14     	; 0x5ee <__divmodsi4_neg2>
 5e0:	0e 94 07 03 	call	0x60e	; 0x60e <__udivmodsi4>
 5e4:	07 fc       	sbrc	r0, 7
 5e6:	03 d0       	rcall	.+6      	; 0x5ee <__divmodsi4_neg2>
 5e8:	4e f4       	brtc	.+18     	; 0x5fc <__divmodsi4_exit>
 5ea:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__negsi2>

000005ee <__divmodsi4_neg2>:
 5ee:	50 95       	com	r21
 5f0:	40 95       	com	r20
 5f2:	30 95       	com	r19
 5f4:	21 95       	neg	r18
 5f6:	3f 4f       	sbci	r19, 0xFF	; 255
 5f8:	4f 4f       	sbci	r20, 0xFF	; 255
 5fa:	5f 4f       	sbci	r21, 0xFF	; 255

000005fc <__divmodsi4_exit>:
 5fc:	08 95       	ret

000005fe <__negsi2>:
 5fe:	90 95       	com	r25
 600:	80 95       	com	r24
 602:	70 95       	com	r23
 604:	61 95       	neg	r22
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	8f 4f       	sbci	r24, 0xFF	; 255
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	08 95       	ret

0000060e <__udivmodsi4>:
 60e:	a1 e2       	ldi	r26, 0x21	; 33
 610:	1a 2e       	mov	r1, r26
 612:	aa 1b       	sub	r26, r26
 614:	bb 1b       	sub	r27, r27
 616:	fd 01       	movw	r30, r26
 618:	0d c0       	rjmp	.+26     	; 0x634 <__udivmodsi4_ep>

0000061a <__udivmodsi4_loop>:
 61a:	aa 1f       	adc	r26, r26
 61c:	bb 1f       	adc	r27, r27
 61e:	ee 1f       	adc	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	a2 17       	cp	r26, r18
 624:	b3 07       	cpc	r27, r19
 626:	e4 07       	cpc	r30, r20
 628:	f5 07       	cpc	r31, r21
 62a:	20 f0       	brcs	.+8      	; 0x634 <__udivmodsi4_ep>
 62c:	a2 1b       	sub	r26, r18
 62e:	b3 0b       	sbc	r27, r19
 630:	e4 0b       	sbc	r30, r20
 632:	f5 0b       	sbc	r31, r21

00000634 <__udivmodsi4_ep>:
 634:	66 1f       	adc	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	1a 94       	dec	r1
 63e:	69 f7       	brne	.-38     	; 0x61a <__udivmodsi4_loop>
 640:	60 95       	com	r22
 642:	70 95       	com	r23
 644:	80 95       	com	r24
 646:	90 95       	com	r25
 648:	9b 01       	movw	r18, r22
 64a:	ac 01       	movw	r20, r24
 64c:	bd 01       	movw	r22, r26
 64e:	cf 01       	movw	r24, r30
 650:	08 95       	ret

00000652 <setjmp>:
 652:	dc 01       	movw	r26, r24
 654:	2d 92       	st	X+, r2
 656:	3d 92       	st	X+, r3
 658:	4d 92       	st	X+, r4
 65a:	5d 92       	st	X+, r5
 65c:	6d 92       	st	X+, r6
 65e:	7d 92       	st	X+, r7
 660:	8d 92       	st	X+, r8
 662:	9d 92       	st	X+, r9
 664:	ad 92       	st	X+, r10
 666:	bd 92       	st	X+, r11
 668:	cd 92       	st	X+, r12
 66a:	dd 92       	st	X+, r13
 66c:	ed 92       	st	X+, r14
 66e:	fd 92       	st	X+, r15
 670:	0d 93       	st	X+, r16
 672:	1d 93       	st	X+, r17
 674:	cd 93       	st	X+, r28
 676:	dd 93       	st	X+, r29
 678:	ff 91       	pop	r31
 67a:	ef 91       	pop	r30
 67c:	8d b7       	in	r24, 0x3d	; 61
 67e:	8d 93       	st	X+, r24
 680:	8e b7       	in	r24, 0x3e	; 62
 682:	8d 93       	st	X+, r24
 684:	8f b7       	in	r24, 0x3f	; 63
 686:	8d 93       	st	X+, r24
 688:	ed 93       	st	X+, r30
 68a:	fd 93       	st	X+, r31
 68c:	88 27       	eor	r24, r24
 68e:	99 27       	eor	r25, r25
 690:	09 94       	ijmp

00000692 <longjmp>:
 692:	dc 01       	movw	r26, r24
 694:	cb 01       	movw	r24, r22
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	91 05       	cpc	r25, r1
 69a:	81 1d       	adc	r24, r1
 69c:	2d 90       	ld	r2, X+
 69e:	3d 90       	ld	r3, X+
 6a0:	4d 90       	ld	r4, X+
 6a2:	5d 90       	ld	r5, X+
 6a4:	6d 90       	ld	r6, X+
 6a6:	7d 90       	ld	r7, X+
 6a8:	8d 90       	ld	r8, X+
 6aa:	9d 90       	ld	r9, X+
 6ac:	ad 90       	ld	r10, X+
 6ae:	bd 90       	ld	r11, X+
 6b0:	cd 90       	ld	r12, X+
 6b2:	dd 90       	ld	r13, X+
 6b4:	ed 90       	ld	r14, X+
 6b6:	fd 90       	ld	r15, X+
 6b8:	0d 91       	ld	r16, X+
 6ba:	1d 91       	ld	r17, X+
 6bc:	cd 91       	ld	r28, X+
 6be:	dd 91       	ld	r29, X+
 6c0:	ed 91       	ld	r30, X+
 6c2:	fd 91       	ld	r31, X+
 6c4:	0d 90       	ld	r0, X+
 6c6:	f8 94       	cli
 6c8:	fe bf       	out	0x3e, r31	; 62
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	ed bf       	out	0x3d, r30	; 61
 6ce:	ed 91       	ld	r30, X+
 6d0:	fd 91       	ld	r31, X+
 6d2:	09 94       	ijmp

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
