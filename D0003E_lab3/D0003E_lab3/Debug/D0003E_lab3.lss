
D0003E_lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000742  000007d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000742  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000227  00800118  00800118  000007ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001720  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d94  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000949  00000000  00000000  00002e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00003768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000626  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f4a  00000000  00000000  0000407e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00004fc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e4       	ldi	r30, 0x42	; 66
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	af 33       	cpi	r26, 0x3F	; 63
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  92:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar.part.0>:
	
	// Low power waveform, enabling LCD
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
}

void writeChar(char ch, int pos)
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	if (pos > 5)
	{
		return;
	}
	
	int offset = (pos % 2); //offset within a column
  aa:	8b 01       	movw	r16, r22
  ac:	01 70       	andi	r16, 0x01	; 1
  ae:	10 78       	andi	r17, 0x80	; 128
  b0:	17 fd       	sbrc	r17, 7
  b2:	4d c0       	rjmp	.+154    	; 0x14e <writeChar.part.0+0xb4>
	int column = pos / 2;
	uint8_t reset_mask;
	uint8_t digit_nibble;
	uint8_t cleared_nibble;
	uint16_t digit;
	uint8_t *addr = (uint8_t*) LCDADDRESS + column;
  b4:	77 fd       	sbrc	r23, 7
  b6:	53 c0       	rjmp	.+166    	; 0x15e <writeChar.part.0+0xc4>
  b8:	75 95       	asr	r23
  ba:	67 95       	ror	r22
  bc:	eb 01       	movw	r28, r22
  be:	c4 51       	subi	r28, 0x14	; 20
  c0:	df 4f       	sbci	r29, 0xFF	; 255
	
	// if ch is not a digit, empty the position instead
	if (isdigit(ch))
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	20 53       	subi	r18, 0x30	; 48
  c8:	31 09       	sbc	r19, r1
  ca:	2a 30       	cpi	r18, 0x0A	; 10
  cc:	31 05       	cpc	r19, r1
  ce:	e0 f5       	brcc	.+120    	; 0x148 <writeChar.part.0+0xae>
	{
		uint8_t index = ch - '0';	// Convert the character to an integer
		digit = sccDigits[index];	// Use integer to index the SCC array
  d0:	80 53       	subi	r24, 0x30	; 48
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	ec 5f       	subi	r30, 0xFC	; 252
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	c0 80       	ld	r12, Z
  e0:	d1 80       	ldd	r13, Z+1	; 0x01
  e2:	00 0f       	add	r16, r16
  e4:	11 1f       	adc	r17, r17
  e6:	00 0f       	add	r16, r16
  e8:	11 1f       	adc	r17, r17
	}
	else
	{
		digit = 0x0000;
  ea:	e1 2c       	mov	r14, r1
  ec:	f1 2c       	mov	r15, r1
	}
	
	for(int i = 0; i < 4; i++)
	{
		reset_mask = (i>0) ? 0b0000 : 0b0110;					// For LCDDR 0/1/2, preserve unused bits 1 and 2, otherwise preserve no bits
  ee:	36 e0       	ldi	r19, 0x06	; 6
		cleared_nibble = (*addr << 4*offset) & reset_mask;	// Use reset_mask to clear the relevant nibble in memory
		digit_nibble = (digit) & 0x0f;						// Mask upper 4 bits
  f0:	2c 2d       	mov	r18, r12
  f2:	2f 70       	andi	r18, 0x0F	; 15
		digit_nibble = digit_nibble | cleared_nibble;		// Combine the cleared nibble with masked nibble to preserve bits not used
		setbits(addr, 4, 4*offset, digit_nibble);
  f4:	98 81       	ld	r25, Y
  f6:	89 2f       	mov	r24, r25
  f8:	00 2e       	mov	r0, r16
  fa:	01 c0       	rjmp	.+2      	; 0xfe <writeChar.part.0+0x64>
  fc:	88 0f       	add	r24, r24
  fe:	0a 94       	dec	r0
 100:	ea f7       	brpl	.-6      	; 0xfc <writeChar.part.0+0x62>
 102:	83 23       	and	r24, r19
 104:	82 2b       	or	r24, r18
 106:	28 2f       	mov	r18, r24
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	a8 01       	movw	r20, r16
 10c:	64 e0       	ldi	r22, 0x04	; 4
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	ce 01       	movw	r24, r28
 112:	0e 94 ff 02 	call	0x5fe	; 0x5fe <setbits>
		digit = digit >> 4;									// Shift right to get to the next nibble of the digit
 116:	d2 94       	swap	r13
 118:	c2 94       	swap	r12
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	c8 22       	and	r12, r24
 11e:	cd 24       	eor	r12, r13
 120:	d8 22       	and	r13, r24
 122:	cd 24       	eor	r12, r13
		addr+=5;											// Increment the address, makes sure we use LCDDRX, LCDDRX+5, LCDDRX+10, LCDDRX+15
 124:	25 96       	adiw	r28, 0x05	; 5
	else
	{
		digit = 0x0000;
	}
	
	for(int i = 0; i < 4; i++)
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	e8 1a       	sub	r14, r24
 12a:	f8 0a       	sbc	r15, r24
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	e8 16       	cp	r14, r24
 132:	f1 04       	cpc	r15, r1
 134:	e9 f6       	brne	.-70     	; 0xf0 <writeChar.part.0+0x56>
		setbits(addr, 4, 4*offset, digit_nibble);
		digit = digit >> 4;									// Shift right to get to the next nibble of the digit
		addr+=5;											// Increment the address, makes sure we use LCDDRX, LCDDRX+5, LCDDRX+10, LCDDRX+15
	}
	
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	df 90       	pop	r13
 144:	cf 90       	pop	r12
 146:	08 95       	ret
		uint8_t index = ch - '0';	// Convert the character to an integer
		digit = sccDigits[index];	// Use integer to index the SCC array
	}
	else
	{
		digit = 0x0000;
 148:	c1 2c       	mov	r12, r1
 14a:	d1 2c       	mov	r13, r1
 14c:	ca cf       	rjmp	.-108    	; 0xe2 <writeChar.part.0+0x48>
	if (pos > 5)
	{
		return;
	}
	
	int offset = (pos % 2); //offset within a column
 14e:	01 50       	subi	r16, 0x01	; 1
 150:	11 09       	sbc	r17, r1
 152:	0e 6f       	ori	r16, 0xFE	; 254
 154:	1f 6f       	ori	r17, 0xFF	; 255
 156:	0f 5f       	subi	r16, 0xFF	; 255
 158:	1f 4f       	sbci	r17, 0xFF	; 255
	int column = pos / 2;
	uint8_t reset_mask;
	uint8_t digit_nibble;
	uint8_t cleared_nibble;
	uint16_t digit;
	uint8_t *addr = (uint8_t*) LCDADDRESS + column;
 15a:	77 ff       	sbrs	r23, 7
 15c:	ad cf       	rjmp	.-166    	; 0xb8 <writeChar.part.0+0x1e>
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	aa cf       	rjmp	.-172    	; 0xb8 <writeChar.part.0+0x1e>

00000164 <initLCD>:
static const int sccDigits[10] = {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};

void initLCD()
{
	
	CLKPR = 0x80;
 164:	e1 e6       	ldi	r30, 0x61	; 97
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	80 83       	st	Z, r24
	CLKPR = 0x00;
 16c:	10 82       	st	Z, r1
	
	// Using asynchronous clock, setting segments to 25, setting duty to 1/4
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX0) | (1<<LCDMUX1) | (1<<LCDPM2)| (1<<LCDPM1) | (1<<LCDPM0);
 16e:	87 eb       	ldi	r24, 0xB7	; 183
 170:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	
	// Prescaler set to N = 16, Clock divide D=8
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	
	//Drive time set to 300 microseconds
	LCDCCR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 17a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	// Low power waveform, enabling LCD
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
 17e:	80 ec       	ldi	r24, 0xC0	; 192
 180:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
 184:	08 95       	ret

00000186 <writeChar>:
}

void writeChar(char ch, int pos)
{
	// If out of bounds, do nothing
	if (pos > 5)
 186:	66 30       	cpi	r22, 0x06	; 6
 188:	71 05       	cpc	r23, r1
 18a:	14 f4       	brge	.+4      	; 0x190 <writeChar+0xa>
 18c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <writeChar.part.0>
 190:	08 95       	ret

00000192 <blink>:
			return 0;
		}
		n--;
	}
	return 1;
}
 192:	10 e0       	ldi	r17, 0x00	; 0
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <blink+0xe>
 196:	95 95       	asr	r25
 198:	87 95       	ror	r24
 19a:	c8 17       	cp	r28, r24
 19c:	d9 07       	cpc	r29, r25
 19e:	6c f4       	brge	.+26     	; 0x1ba <blink+0x28>
 1a0:	0e 94 b1 01 	call	0x362	; 0x362 <get_counter>
 1a4:	ec 01       	movw	r28, r24
 1a6:	0e 94 c0 01 	call	0x380	; 0x380 <get_interrupt_cycle>
 1aa:	97 ff       	sbrs	r25, 7
 1ac:	f4 cf       	rjmp	.-24     	; 0x196 <blink+0x4>
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	95 95       	asr	r25
 1b2:	87 95       	ror	r24
 1b4:	c8 17       	cp	r28, r24
 1b6:	d9 07       	cpc	r29, r25
 1b8:	9c f3       	brlt	.-26     	; 0x1a0 <blink+0xe>
 1ba:	0e 94 b6 01 	call	0x36c	; 0x36c <reset_counter>
 1be:	11 11       	cpse	r17, r1
 1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <blink+0x46>
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	8f ee       	ldi	r24, 0xEF	; 239
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <setbits>
 1d4:	11 e0       	ldi	r17, 0x01	; 1
 1d6:	e4 cf       	rjmp	.-56     	; 0x1a0 <blink+0xe>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	8f ee       	ldi	r24, 0xEF	; 239
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <setbits>
 1ea:	10 e0       	ldi	r17, 0x00	; 0
 1ec:	d9 cf       	rjmp	.-78     	; 0x1a0 <blink+0xe>

000001ee <printAt>:

void printAt(long num, int pos) {
 1ee:	8f 92       	push	r8
 1f0:	9f 92       	push	r9
 1f2:	af 92       	push	r10
 1f4:	bf 92       	push	r11
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	4b 01       	movw	r8, r22
 204:	5c 01       	movw	r10, r24
 206:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 208:	24 e6       	ldi	r18, 0x64	; 100
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodsi4>
 214:	2a e0       	ldi	r18, 0x0A	; 10
 216:	c2 2e       	mov	r12, r18
 218:	d1 2c       	mov	r13, r1
 21a:	e1 2c       	mov	r14, r1
 21c:	f1 2c       	mov	r15, r1
 21e:	a7 01       	movw	r20, r14
 220:	96 01       	movw	r18, r12
 222:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodsi4>
 226:	be 01       	movw	r22, r28
 228:	80 e3       	ldi	r24, 0x30	; 48
 22a:	82 0f       	add	r24, r18
 22c:	0e 94 c3 00 	call	0x186	; 0x186 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
 230:	21 96       	adiw	r28, 0x01	; 1
 232:	c5 01       	movw	r24, r10
 234:	b4 01       	movw	r22, r8
 236:	a7 01       	movw	r20, r14
 238:	96 01       	movw	r18, r12
 23a:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodsi4>
 23e:	86 2f       	mov	r24, r22
 240:	be 01       	movw	r22, r28
 242:	80 5d       	subi	r24, 0xD0	; 208

}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	9f 90       	pop	r9
 256:	8f 90       	pop	r8

void printAt(long num, int pos) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
 258:	0c 94 c3 00 	jmp	0x186	; 0x186 <writeChar>

0000025c <button>:

void button(int arg) {
	

	bool stick_active = false;
	long counter = 0;
 25c:	c1 2c       	mov	r12, r1
 25e:	d1 2c       	mov	r13, r1
 260:	76 01       	movw	r14, r12
}

void button(int arg) {
	

	bool stick_active = false;
 262:	c0 e0       	ldi	r28, 0x00	; 0
 264:	0e c0       	rjmp	.+28     	; 0x282 <button+0x26>
	
	while(1) {
		int stick_down = joystick_down();
		
		// If joystick is currently in a down state and wasn't before
		if (stick_down == 0 && !stick_active)
 266:	c1 11       	cpse	r28, r1
 268:	06 c0       	rjmp	.+12     	; 0x276 <button+0x1a>
		{
	
			stick_active = true;
			counter++;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	c8 1a       	sub	r12, r24
 26e:	d8 0a       	sbc	r13, r24
 270:	e8 0a       	sbc	r14, r24
 272:	f8 0a       	sbc	r15, r24
		
		// If joystick is currently in a down state and wasn't before
		if (stick_down == 0 && !stick_active)
		{
	
			stick_active = true;
 274:	c1 e0       	ldi	r28, 0x01	; 1

		// If stick is currently not in a down state
		else if (stick_down == 1){
			stick_active = false;
		}
		printAt(counter, 4);
 276:	44 e0       	ldi	r20, 0x04	; 4
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	c7 01       	movw	r24, r14
 27c:	b6 01       	movw	r22, r12
 27e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <printAt>

	bool stick_active = false;
	long counter = 0;
	
	while(1) {
		int stick_down = joystick_down();
 282:	0e 94 c3 01 	call	0x386	; 0x386 <joystick_down>
		
		// If joystick is currently in a down state and wasn't before
		if (stick_down == 0 && !stick_active)
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	71 f3       	breq	.-36     	; 0x266 <button+0xa>
			stick_active = true;
			counter++;
		}

		// If stick is currently not in a down state
		else if (stick_down == 1){
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	a1 f7       	brne	.-24     	; 0x276 <button+0x1a>
			stick_active = false;
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	f2 cf       	rjmp	.-28     	; 0x276 <button+0x1a>

00000292 <primes>:
		printAt(counter, 4);
	}
	
}

void primes(long i) {
 292:	6b 01       	movw	r12, r22
 294:	7c 01       	movw	r14, r24
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	c2 1a       	sub	r12, r18
 29a:	d1 08       	sbc	r13, r1
 29c:	e1 08       	sbc	r14, r1
 29e:	f1 08       	sbc	r15, r1
 2a0:	46 01       	movw	r8, r12
 2a2:	57 01       	movw	r10, r14
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	88 1a       	sub	r8, r24
 2a8:	98 0a       	sbc	r9, r24
 2aa:	a8 0a       	sbc	r10, r24
 2ac:	b8 0a       	sbc	r11, r24

int is_prime(long i)
{
	long n = i-1;
	
	while (n>1)
 2ae:	22 e0       	ldi	r18, 0x02	; 2
 2b0:	c2 16       	cp	r12, r18
 2b2:	d1 04       	cpc	r13, r1
 2b4:	e1 04       	cpc	r14, r1
 2b6:	f1 04       	cpc	r15, r1
 2b8:	64 f4       	brge	.+24     	; 0x2d2 <primes+0x40>
 2ba:	18 c0       	rjmp	.+48     	; 0x2ec <primes+0x5a>
	{
		if (i%n == 0)
		{
			return 0;
		}
		n--;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	c8 1a       	sub	r12, r24
 2c0:	d1 08       	sbc	r13, r1
 2c2:	e1 08       	sbc	r14, r1
 2c4:	f1 08       	sbc	r15, r1

int is_prime(long i)
{
	long n = i-1;
	
	while (n>1)
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	c2 16       	cp	r12, r18
 2ca:	d1 04       	cpc	r13, r1
 2cc:	e1 04       	cpc	r14, r1
 2ce:	f1 04       	cpc	r15, r1
 2d0:	69 f0       	breq	.+26     	; 0x2ec <primes+0x5a>
	{
		if (i%n == 0)
 2d2:	c5 01       	movw	r24, r10
 2d4:	b4 01       	movw	r22, r8
 2d6:	a7 01       	movw	r20, r14
 2d8:	96 01       	movw	r18, r12
 2da:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodsi4>
 2de:	67 2b       	or	r22, r23
 2e0:	68 2b       	or	r22, r24
 2e2:	69 2b       	or	r22, r25
 2e4:	59 f7       	brne	.-42     	; 0x2bc <primes+0x2a>
 2e6:	75 01       	movw	r14, r10
 2e8:	64 01       	movw	r12, r8
		{
			
			printAt(i, 0);
		}
		i++;
	}
 2ea:	da cf       	rjmp	.-76     	; 0x2a0 <primes+0xe>
	while (1)
	{
		if (is_prime(i))
		{
			
			printAt(i, 0);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	c5 01       	movw	r24, r10
 2f2:	b4 01       	movw	r22, r8
 2f4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <printAt>
 2f8:	75 01       	movw	r14, r10
 2fa:	64 01       	movw	r12, r8
 2fc:	d1 cf       	rjmp	.-94     	; 0x2a0 <primes+0xe>

000002fe <main>:

}

int main(void)
{
    spawn(blink, 0);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	89 ec       	ldi	r24, 0xC9	; 201
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 c9 01 	call	0x392	; 0x392 <spawn>
	spawn(button, 0);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	8e e2       	ldi	r24, 0x2E	; 46
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 c9 01 	call	0x392	; 0x392 <spawn>
	primes(1);
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 49 01 	call	0x292	; 0x292 <primes>

00000322 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	00 d0       	rcall	.+0      	; 0x328 <dispatch+0x6>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	9a 83       	std	Y+2, r25	; 0x02
 32e:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 330:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 334:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 338:	06 96       	adiw	r24, 0x06	; 6
 33a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <setjmp>
 33e:	89 2b       	or	r24, r25
 340:	29 f0       	breq	.+10     	; 0x34c <dispatch+0x2a>
        current = next;
        longjmp(next->context,1);
    }
}
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret
    return p;
}

static void dispatch(thread next) {
    if (setjmp(current->context) == 0) {
        current = next;
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	9a 81       	ldd	r25, Y+2	; 0x02
 350:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 354:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	06 96       	adiw	r24, 0x06	; 6
 35e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <longjmp>

00000362 <get_counter>:
	yield();
}

int get_counter() {
	return interrupts;
}
 362:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 366:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 36a:	08 95       	ret

0000036c <reset_counter>:

void reset_counter() {
	interrupts -= ICYCLE;	// decrement by number of interrupts per second to maintain timing
 36c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 370:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 374:	44 97       	sbiw	r24, 0x14	; 20
 376:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 37a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 37e:	08 95       	ret

00000380 <get_interrupt_cycle>:
}

int get_interrupt_cycle() {
	return ICYCLE;
}
 380:	84 e1       	ldi	r24, 0x14	; 20
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	08 95       	ret

00000386 <joystick_down>:

int joystick_down() {
	return PINB >> 7;
 386:	83 b1       	in	r24, 0x03	; 3
 388:	88 1f       	adc	r24, r24
 38a:	88 27       	eor	r24, r24
 38c:	88 1f       	adc	r24, r24
}
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	08 95       	ret

00000392 <spawn>:
        current = next;
        longjmp(next->context,1);
    }
}

void spawn(void (* function)(int), int arg) {
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <spawn+0xe>
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	7c 01       	movw	r14, r24
 3a6:	8b 01       	movw	r16, r22
    thread newp;

    DISABLE();
 3a8:	f8 94       	cli
    if (!initialized) initialize();
 3aa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <initialized>
 3ae:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <initialized+0x1>
 3b2:	89 2b       	or	r24, r25
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <spawn+0x26>
 3b6:	46 c0       	rjmp	.+140    	; 0x444 <__DATA_REGION_LENGTH__+0x44>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 3bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 3c0:	9a 83       	std	Y+2, r25	; 0x02
 3c2:	89 83       	std	Y+1, r24	; 0x01
    if (*queue) {
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	09 f4       	brne	.+2      	; 0x3ca <spawn+0x38>
 3c8:	7b c0       	rjmp	.+246    	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
        *queue = (*queue)->next;
 3ca:	fc 01       	movw	r30, r24
 3cc:	84 81       	ldd	r24, Z+4	; 0x04
 3ce:	95 81       	ldd	r25, Z+5	; 0x05
 3d0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freeQ+0x1>
 3d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 3d8:	f1 82       	std	Z+1, r15	; 0x01
 3da:	e0 82       	st	Z, r14
    newp->arg = arg;
 3dc:	13 83       	std	Z+3, r17	; 0x03
 3de:	02 83       	std	Z+2, r16	; 0x02
    newp->next = NULL;
 3e0:	15 82       	std	Z+5, r1	; 0x05
 3e2:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 3e4:	cf 01       	movw	r24, r30
 3e6:	06 96       	adiw	r24, 0x06	; 6
 3e8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <setjmp>
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <spawn+0x60>
 3f0:	6f c0       	rjmp	.+222    	; 0x4d0 <__DATA_REGION_LENGTH__+0xd0>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 3f2:	e9 81       	ldd	r30, Y+1	; 0x01
 3f4:	fa 81       	ldd	r31, Y+2	; 0x02
 3f6:	36 96       	adiw	r30, 0x06	; 6
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	9a 81       	ldd	r25, Y+2	; 0x02
 3fc:	87 59       	subi	r24, 0x97	; 151
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	91 8b       	std	Z+17, r25	; 0x11
 402:	80 8b       	std	Z+16, r24	; 0x10
 404:	93 8b       	std	Z+19, r25	; 0x13
 406:	82 8b       	std	Z+18, r24	; 0x12
    initialized = 1;
}


static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 408:	e9 81       	ldd	r30, Y+1	; 0x01
 40a:	fa 81       	ldd	r31, Y+2	; 0x02
 40c:	15 82       	std	Z+5, r1	; 0x05
 40e:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 410:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <readyQ>
 414:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <readyQ+0x1>
 418:	30 97       	sbiw	r30, 0x00	; 0
 41a:	11 f4       	brne	.+4      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 41c:	52 c0       	rjmp	.+164    	; 0x4c2 <__DATA_REGION_LENGTH__+0xc2>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 41e:	fc 01       	movw	r30, r24
 420:	84 81       	ldd	r24, Z+4	; 0x04
 422:	95 81       	ldd	r25, Z+5	; 0x05
 424:	00 97       	sbiw	r24, 0x00	; 0
 426:	d9 f7       	brne	.-10     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
            q = q->next;
        q->next = p;
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	9a 81       	ldd	r25, Y+2	; 0x02
 42c:	95 83       	std	Z+5, r25	; 0x05
 42e:	84 83       	std	Z+4, r24	; 0x04
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 430:	78 94       	sei
}
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	08 95       	ret
}

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 444:	88 ef       	ldi	r24, 0xF8	; 248
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <threads+0x5>
 44c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <threads+0x4>
 450:	85 e6       	ldi	r24, 0x65	; 101
 452:	92 e0       	ldi	r25, 0x02	; 2
 454:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <threads+0x72>
 458:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <threads+0x71>
 45c:	82 ed       	ldi	r24, 0xD2	; 210
 45e:	92 e0       	ldi	r25, 0x02	; 2
 460:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <threads+0xdf>
 464:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 468:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <threads+0x14c>
 46c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <threads+0x14b>
	
	initLCD();
 470:	0e 94 b2 00 	call	0x164	; 0x164 <initLCD>
	
	// Enable joystick
	PORTB = PORTB | (1<<7);
 474:	2f 9a       	sbi	0x05, 7	; 5
	
	// Enable OC1A pin
	PORTB = PORTB | (1<<5);
 476:	2d 9a       	sbi	0x05, 5	; 5
	
	// Timer initialization, set prescaler to 1024 and turn on CTC
	TCCR1B = (1<<CS12) | (1<<CS10)  | (1<<WGM12);
 478:	8d e0       	ldi	r24, 0x0D	; 13
 47a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	
	// OC1A set on compare match
	TCCR1A = (1<<COM1A1) | (1<<COM1A0);
 47e:	80 ec       	ldi	r24, 0xC0	; 192
 480:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
	
	// Enable out compare A match interrupt
	TIMSK1 |= (1<<OCIE1A);
 484:	ef e6       	ldi	r30, 0x6F	; 111
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	82 60       	ori	r24, 0x02	; 2
 48c:	80 83       	st	Z, r24
	
	OCR1A = CLOCK/PRESCALER;
 48e:	84 e8       	ldi	r24, 0x84	; 132
 490:	9e e1       	ldi	r25, 0x1E	; 30
 492:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 496:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	
	TCNT1 = 0;
 49a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 49e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>

    initialized = 1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <initialized+0x1>
 4aa:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 4b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 4b6:	9a 83       	std	Y+2, r25	; 0x02
 4b8:	89 83       	std	Y+1, r24	; 0x01
    if (*queue) {
 4ba:	00 97       	sbiw	r24, 0x00	; 0
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
 4be:	85 cf       	rjmp	.-246    	; 0x3ca <spawn+0x38>
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>


static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	9a 81       	ldd	r25, Y+2	; 0x02
 4c6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <readyQ+0x1>
 4ca:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <readyQ>
 4ce:	b0 cf       	rjmp	.-160    	; 0x430 <__DATA_REGION_LENGTH__+0x30>
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 4d0:	78 94       	sei
        current->function(current->arg);
 4d2:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4d6:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4da:	ed 91       	ld	r30, X+
 4dc:	fc 91       	ld	r31, X
 4de:	11 97       	sbiw	r26, 0x01	; 1
 4e0:	12 96       	adiw	r26, 0x02	; 2
 4e2:	8d 91       	ld	r24, X+
 4e4:	9c 91       	ld	r25, X
 4e6:	13 97       	sbiw	r26, 0x03	; 3
 4e8:	09 95       	icall
        DISABLE();
 4ea:	f8 94       	cli
        enqueue(current, &freeQ);
 4ec:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4f0:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    initialized = 1;
}


static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 4f4:	15 96       	adiw	r26, 0x05	; 5
 4f6:	1c 92       	st	X, r1
 4f8:	1e 92       	st	-X, r1
 4fa:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 4fc:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 500:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 504:	30 97       	sbiw	r30, 0x00	; 0
 506:	11 f4       	brne	.+4      	; 0x50c <__stack+0xd>
 508:	17 c0       	rjmp	.+46     	; 0x538 <__stack+0x39>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 50a:	fc 01       	movw	r30, r24
 50c:	84 81       	ldd	r24, Z+4	; 0x04
 50e:	95 81       	ldd	r25, Z+5	; 0x05
 510:	00 97       	sbiw	r24, 0x00	; 0
 512:	d9 f7       	brne	.-10     	; 0x50a <__stack+0xb>
            q = q->next;
        q->next = p;
 514:	b5 83       	std	Z+5, r27	; 0x05
 516:	a4 83       	std	Z+4, r26	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 518:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 51c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 520:	00 97       	sbiw	r24, 0x00	; 0
 522:	a1 f0       	breq	.+40     	; 0x54c <__stack+0x4d>
        *queue = (*queue)->next;
 524:	fc 01       	movw	r30, r24
 526:	24 81       	ldd	r18, Z+4	; 0x04
 528:	35 81       	ldd	r19, Z+5	; 0x05
 52a:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 52e:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 532:	0e 94 91 01 	call	0x322	; 0x322 <dispatch>
 536:	5d cf       	rjmp	.-326    	; 0x3f2 <spawn+0x60>


static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 538:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 53c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 540:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <readyQ>
 544:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <readyQ+0x1>
    if (*queue) {
 548:	00 97       	sbiw	r24, 0x00	; 0
 54a:	61 f7       	brne	.-40     	; 0x524 <__stack+0x25>
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stack+0x4d>

0000054e <yield>:
    enqueue(newp, &readyQ);
    ENABLE();
}

void yield(void) {
	DISABLE();
 54e:	f8 94       	cli
	enqueue(current, &readyQ);
 550:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 554:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    initialized = 1;
}


static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 558:	fc 01       	movw	r30, r24
 55a:	15 82       	std	Z+5, r1	; 0x05
 55c:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 55e:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <readyQ>
 562:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <readyQ+0x1>
 566:	10 97       	sbiw	r26, 0x00	; 0
 568:	b9 f0       	breq	.+46     	; 0x598 <yield+0x4a>
 56a:	fd 01       	movw	r30, r26
 56c:	01 c0       	rjmp	.+2      	; 0x570 <yield+0x22>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 56e:	f9 01       	movw	r30, r18
 570:	24 81       	ldd	r18, Z+4	; 0x04
 572:	35 81       	ldd	r19, Z+5	; 0x05
 574:	21 15       	cp	r18, r1
 576:	31 05       	cpc	r19, r1
 578:	d1 f7       	brne	.-12     	; 0x56e <yield+0x20>
            q = q->next;
        q->next = p;
 57a:	95 83       	std	Z+5, r25	; 0x05
 57c:	84 83       	std	Z+4, r24	; 0x04
 57e:	14 96       	adiw	r26, 0x04	; 4
 580:	2d 91       	ld	r18, X+
 582:	3c 91       	ld	r19, X
 584:	15 97       	sbiw	r26, 0x05	; 5
 586:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 588:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <readyQ+0x1>
 58c:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 590:	0e 94 91 01 	call	0x322	; 0x322 <dispatch>
	ENABLE();
 594:	78 94       	sei
}
 596:	08 95       	ret
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	09 f4       	brne	.+2      	; 0x59e <yield+0x50>
 59c:	ff cf       	rjmp	.-2      	; 0x59c <yield+0x4e>
 59e:	20 e0       	ldi	r18, 0x00	; 0
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f2 cf       	rjmp	.-28     	; 0x588 <yield+0x3a>

000005a4 <__vector_7>:
int initialized = 0;
static int interrupts = 0;



ISR(TIMER1_COMPA_vect) {
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	2f 93       	push	r18
 5b0:	3f 93       	push	r19
 5b2:	4f 93       	push	r20
 5b4:	5f 93       	push	r21
 5b6:	6f 93       	push	r22
 5b8:	7f 93       	push	r23
 5ba:	8f 93       	push	r24
 5bc:	9f 93       	push	r25
 5be:	af 93       	push	r26
 5c0:	bf 93       	push	r27
 5c2:	ef 93       	push	r30
 5c4:	ff 93       	push	r31
	interrupts++;	// increment number of interrupts
 5c6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 5ca:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 5d4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	yield();
 5d8:	0e 94 a7 02 	call	0x54e	; 0x54e <yield>
}
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <setbits>:
 */ 
#include <stdint-gcc.h>


void setbits(volatile uint8_t *ptr, int width, int start, uint8_t value)
{
 5fe:	fc 01       	movw	r30, r24
 600:	86 2f       	mov	r24, r22
	uint8_t mask = ~(~0 << width) << start;
	uint8_t data = (value << start) & mask;
 602:	6f ef       	ldi	r22, 0xFF	; 255
 604:	7f ef       	ldi	r23, 0xFF	; 255
 606:	02 c0       	rjmp	.+4      	; 0x60c <setbits+0xe>
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	8a 95       	dec	r24
 60e:	e2 f7       	brpl	.-8      	; 0x608 <setbits+0xa>
 610:	60 95       	com	r22
 612:	70 95       	com	r23
 614:	04 2e       	mov	r0, r20
 616:	01 c0       	rjmp	.+2      	; 0x61a <setbits+0x1c>
 618:	66 0f       	add	r22, r22
 61a:	0a 94       	dec	r0
 61c:	ea f7       	brpl	.-6      	; 0x618 <setbits+0x1a>
	*ptr = *ptr & ~mask;
 61e:	80 81       	ld	r24, Z
 620:	96 2f       	mov	r25, r22
 622:	90 95       	com	r25
 624:	89 23       	and	r24, r25
 626:	80 83       	st	Z, r24
	*ptr = *ptr | data;
 628:	80 81       	ld	r24, Z
 62a:	01 c0       	rjmp	.+2      	; 0x62e <setbits+0x30>
 62c:	22 0f       	add	r18, r18
 62e:	4a 95       	dec	r20
 630:	ea f7       	brpl	.-6      	; 0x62c <setbits+0x2e>
 632:	62 23       	and	r22, r18
 634:	68 2b       	or	r22, r24
 636:	60 83       	st	Z, r22
 638:	08 95       	ret

0000063a <__divmodsi4>:
 63a:	05 2e       	mov	r0, r21
 63c:	97 fb       	bst	r25, 7
 63e:	1e f4       	brtc	.+6      	; 0x646 <__divmodsi4+0xc>
 640:	00 94       	com	r0
 642:	0e 94 34 03 	call	0x668	; 0x668 <__negsi2>
 646:	57 fd       	sbrc	r21, 7
 648:	07 d0       	rcall	.+14     	; 0x658 <__divmodsi4_neg2>
 64a:	0e 94 3c 03 	call	0x678	; 0x678 <__udivmodsi4>
 64e:	07 fc       	sbrc	r0, 7
 650:	03 d0       	rcall	.+6      	; 0x658 <__divmodsi4_neg2>
 652:	4e f4       	brtc	.+18     	; 0x666 <__divmodsi4_exit>
 654:	0c 94 34 03 	jmp	0x668	; 0x668 <__negsi2>

00000658 <__divmodsi4_neg2>:
 658:	50 95       	com	r21
 65a:	40 95       	com	r20
 65c:	30 95       	com	r19
 65e:	21 95       	neg	r18
 660:	3f 4f       	sbci	r19, 0xFF	; 255
 662:	4f 4f       	sbci	r20, 0xFF	; 255
 664:	5f 4f       	sbci	r21, 0xFF	; 255

00000666 <__divmodsi4_exit>:
 666:	08 95       	ret

00000668 <__negsi2>:
 668:	90 95       	com	r25
 66a:	80 95       	com	r24
 66c:	70 95       	com	r23
 66e:	61 95       	neg	r22
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	08 95       	ret

00000678 <__udivmodsi4>:
 678:	a1 e2       	ldi	r26, 0x21	; 33
 67a:	1a 2e       	mov	r1, r26
 67c:	aa 1b       	sub	r26, r26
 67e:	bb 1b       	sub	r27, r27
 680:	fd 01       	movw	r30, r26
 682:	0d c0       	rjmp	.+26     	; 0x69e <__udivmodsi4_ep>

00000684 <__udivmodsi4_loop>:
 684:	aa 1f       	adc	r26, r26
 686:	bb 1f       	adc	r27, r27
 688:	ee 1f       	adc	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	a2 17       	cp	r26, r18
 68e:	b3 07       	cpc	r27, r19
 690:	e4 07       	cpc	r30, r20
 692:	f5 07       	cpc	r31, r21
 694:	20 f0       	brcs	.+8      	; 0x69e <__udivmodsi4_ep>
 696:	a2 1b       	sub	r26, r18
 698:	b3 0b       	sbc	r27, r19
 69a:	e4 0b       	sbc	r30, r20
 69c:	f5 0b       	sbc	r31, r21

0000069e <__udivmodsi4_ep>:
 69e:	66 1f       	adc	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	1a 94       	dec	r1
 6a8:	69 f7       	brne	.-38     	; 0x684 <__udivmodsi4_loop>
 6aa:	60 95       	com	r22
 6ac:	70 95       	com	r23
 6ae:	80 95       	com	r24
 6b0:	90 95       	com	r25
 6b2:	9b 01       	movw	r18, r22
 6b4:	ac 01       	movw	r20, r24
 6b6:	bd 01       	movw	r22, r26
 6b8:	cf 01       	movw	r24, r30
 6ba:	08 95       	ret

000006bc <setjmp>:
 6bc:	dc 01       	movw	r26, r24
 6be:	2d 92       	st	X+, r2
 6c0:	3d 92       	st	X+, r3
 6c2:	4d 92       	st	X+, r4
 6c4:	5d 92       	st	X+, r5
 6c6:	6d 92       	st	X+, r6
 6c8:	7d 92       	st	X+, r7
 6ca:	8d 92       	st	X+, r8
 6cc:	9d 92       	st	X+, r9
 6ce:	ad 92       	st	X+, r10
 6d0:	bd 92       	st	X+, r11
 6d2:	cd 92       	st	X+, r12
 6d4:	dd 92       	st	X+, r13
 6d6:	ed 92       	st	X+, r14
 6d8:	fd 92       	st	X+, r15
 6da:	0d 93       	st	X+, r16
 6dc:	1d 93       	st	X+, r17
 6de:	cd 93       	st	X+, r28
 6e0:	dd 93       	st	X+, r29
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	8d b7       	in	r24, 0x3d	; 61
 6e8:	8d 93       	st	X+, r24
 6ea:	8e b7       	in	r24, 0x3e	; 62
 6ec:	8d 93       	st	X+, r24
 6ee:	8f b7       	in	r24, 0x3f	; 63
 6f0:	8d 93       	st	X+, r24
 6f2:	ed 93       	st	X+, r30
 6f4:	fd 93       	st	X+, r31
 6f6:	88 27       	eor	r24, r24
 6f8:	99 27       	eor	r25, r25
 6fa:	09 94       	ijmp

000006fc <longjmp>:
 6fc:	dc 01       	movw	r26, r24
 6fe:	cb 01       	movw	r24, r22
 700:	81 30       	cpi	r24, 0x01	; 1
 702:	91 05       	cpc	r25, r1
 704:	81 1d       	adc	r24, r1
 706:	2d 90       	ld	r2, X+
 708:	3d 90       	ld	r3, X+
 70a:	4d 90       	ld	r4, X+
 70c:	5d 90       	ld	r5, X+
 70e:	6d 90       	ld	r6, X+
 710:	7d 90       	ld	r7, X+
 712:	8d 90       	ld	r8, X+
 714:	9d 90       	ld	r9, X+
 716:	ad 90       	ld	r10, X+
 718:	bd 90       	ld	r11, X+
 71a:	cd 90       	ld	r12, X+
 71c:	dd 90       	ld	r13, X+
 71e:	ed 90       	ld	r14, X+
 720:	fd 90       	ld	r15, X+
 722:	0d 91       	ld	r16, X+
 724:	1d 91       	ld	r17, X+
 726:	cd 91       	ld	r28, X+
 728:	dd 91       	ld	r29, X+
 72a:	ed 91       	ld	r30, X+
 72c:	fd 91       	ld	r31, X+
 72e:	0d 90       	ld	r0, X+
 730:	f8 94       	cli
 732:	fe bf       	out	0x3e, r31	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	ed bf       	out	0x3d, r30	; 61
 738:	ed 91       	ld	r30, X+
 73a:	fd 91       	ld	r31, X+
 73c:	09 94       	ijmp

0000073e <_exit>:
 73e:	f8 94       	cli

00000740 <__stop_program>:
 740:	ff cf       	rjmp	.-2      	; 0x740 <__stop_program>
